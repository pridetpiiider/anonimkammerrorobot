import logging, config
from aiogram import Bot, types, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

bot = Bot(token=config.token, parse_mode="html")
dp = Dispatcher(bot=bot, storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

class User(StatesGroup):
    text = State()
    userId = State()

@dp.message_handler(commands=['start'])
async def handlerStart(message: types.Message, state: FSMContext):
    args = message.get_args()
    if args:
       if int(args) == message.from_user.id:
          await message.answer("‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ.")
          return

       await message.answer("–ß–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:") 
       await state.update_data(userId=args)
       await User.text.set()

    else:
       await message.answer(f"<b>üîó –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\nt.me/{config.name}?start={message.from_user.id}\n\n–û–ø—É–±–ª–∏–∫—É–π –µ—ë –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

@dp.message_handler(state=User.text)
async def stateText(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        await bot.send_message(data["userId"], f"<b>–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!</b>\n\n{message.text}\n\n(<a href='t.me/{config.name}?start={message.from_user.id}'>–û—Ç–≤–µ—Ç–∏—Ç—å</a>)")
        await message.answer(f"‚òëÔ∏è –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞!\n\n–ê –ø–æ–∫–∞ —Ç—ã –∂–¥—ë—à—å...\n\n<b>üîó –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\nhttp://t.me/{config.name}?start={message.from_user.id}\n\n–û–ø—É–±–ª–∏–∫—É–π –µ—ë –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        await state.finish()

    except:
        await message.answer("‚õî –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º.")
        await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)